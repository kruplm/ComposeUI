#on:
#  push:
    # Sequence of patterns matched against refs/tags
#    tags:
 #   - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
on:
  release:
    types: [ published ]
    branches: [ main ]

name: Upload Release Asset

jobs:
  build:
    uses: ./.github/workflows/continuous-integration-prototypes.yml
  upload:
    name: Upload Release Asset
    needs: build
    runs-on: windows-latest
    #strategy:
    #  matrix:
    #    dotnet-version: [ '6.0.x' ]
  
    steps:
      #- uses: actions/checkout@v3
      #- name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      #  uses: actions/setup-dotnet@v2
      #  with:
      #    dotnet-version: ${{ matrix.dotnet-version }}
      #- name: list stuff
      #  run:  dir ${{ github.workspace }}
      #- name: Checkout code
      #  uses: actions/checkout@v2
      #- name: Build project # This would actually build your project, using zip for an example artifact
      #  run:  dotnet build ${{ github.workspace }}\src\shell\dotnet\Shell.sln --configuration Release; if ($LASTEXITCODE -ne 0 ) {throw "Build for $_ FAILED"; } 
     
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: shell-binaries
          path: ${{ github.workspace }}/shell-binaries
    
      - name: Display structure of downloaded files
        run: Get-ChildItem -Recurse
        working-directory: ${{ github.workspace }}/shell-binaries
      
      #- name: List bin
      #  run: dir ${{ github.workspace }}/shell-binaries
        
      - name: Compress
        run: Compress-Archive -Path  ${{ github.workspace }}/shell-binaries/* composeui-${{ github.ref_name }}-win32.zip
        
      - name: check tag
        run: echo ${{ github.ref_name }}
        
        
      #- name: Create Release
       # id: create_release
       # uses: actions/create-release@v1
        #env:
         # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #with:
         # tag_name: ${{ github.ref }}
         # release_name: Release ${{ github.ref }}
         # draft: false
         # prerelease: true
        
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          upload_url: ${{github.event.release.upload_url }}
          #upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./composeui_win32.zip
          asset_name: composeui_win32.zip
          asset_content_type: application/zip
          
      
